import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.linear_model import LinearRegression
import plotly.express as px
from datetime import datetime
import plotly.graph_objects as go

# Mapping Thai month abbreviations to numbers
thai_month_map = {
    '‡∏°.‡∏Ñ.': '01', '‡∏Å.‡∏û.': '02', '‡∏°‡∏µ.‡∏Ñ.': '03', '‡πÄ‡∏°.‡∏¢.': '04', '‡∏û.‡∏Ñ.': '05', 
    '‡∏°‡∏¥.‡∏¢.': '06', '‡∏Å.‡∏Ñ.': '07', '‡∏™.‡∏Ñ.': '08', '‡∏Å.‡∏¢.': '09', '‡∏ï.‡∏Ñ.': '10', 
    '‡∏û.‡∏¢.': '11', '‡∏ò.‡∏Ñ.': '12'
}

# Function to parse Thai date and convert to Gregorian
def parse_thai_date(date_str):
    try:
        day, month, year = date_str.split()
        month_num = thai_month_map.get(month.strip(), '01')  # Default to '01' if month not found
        year_gregorian = int(year) - 543  # Convert Buddhist year to Gregorian
        return pd.to_datetime(f"{day}-{month_num}-{year_gregorian}", format="%d-%m-%Y")
    except Exception as e:
        st.warning(f"Error parsing date {date_str}: {e}")
        return pd.NaT

# Load data
try:
    df = pd.read_excel("PTT-SET-23May2025-6M.xlsx", sheet_name="PTT", skiprows=1)
except Exception as e:
    st.error(f"Error loading Excel file: {e}")
    st.stop()


# Set column names
df.columns = [
    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î",
    "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)", "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)",
    "SET Index", "SET ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)"
]

# Parse and convert date column
df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].apply(parse_thai_date)

# Drop rows with invalid dates or NaN values
df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"])

# Sort data by date
df_sorted = df.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")

# Set index starting from 1
df.index = range(1, len(df) + 1)

# Add CSS for table styling
st.markdown(
    """
    <style>
    .dataframe {
        width: 864px !important;  # Match graph width (12 inches * 72 pixels)
        overflow-x: auto;
        margin: 0 auto;  # Center the table
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Display title and table
st.title("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô PTT")
st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
st.dataframe(df.head())




# Prepare data for Linear Regression
X = df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].map(lambda x: x.toordinal()).values.reshape(-1, 1)
y = df_sorted["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"].values

# Create and fit Linear Regression model
model = LinearRegression()
model.fit(X, y)
trend = model.predict(X)


#Create Funtions
def calculate_macd(df, col='‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î'):
    ema12 = df[col].ewm(span=12).mean()
    ema26 = df[col].ewm(span=26).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9).mean()
    return macd, signal, macd - signal
 

st.title("PTT Stock Chart")

chart_type = st.selectbox("Select Indicators Chart", ["Linear Regression", "Interactive", "MACD"])
if chart_type == "Linear Regression":
    X = df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].map(pd.Timestamp.toordinal).values.reshape(-1, 1)
    y = df_sorted["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"].values
    model = LinearRegression().fit(X, y)
    trend = model.predict(X)

    plt.figure(figsize=(10, 5))
    plt.plot(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], y, label="Actual Closing Price")
    plt.plot(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], trend, label="Trend (Linear Regression)", linestyle="--", color="red")
    plt.legend()
    plt.xlabel("Date")
    plt.ylabel("Price (THB)")
    plt.grid(True)
    st.pyplot(plt)
elif chart_type == "Interactive":
    fig = px.line(df, x='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', y='‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î', title='META Stock Price')
    fig.update_layout(xaxis_title='Date', yaxis_title='Price')
    st.plotly_chart(fig, use_container_width=True)
elif chart_type == "MACD":
    macd, signal, hist = calculate_macd(df_sorted)
    fig = go.Figure([
        go.Bar(x=df_sorted['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], y=hist, name='Histogram', marker_color='red'),
        go.Scatter(x=df_sorted['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], y=macd, name='MACD', line=dict(color='blue')),
        go.Scatter(x=df_sorted['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], y=signal, name='Signal', line=dict(color='orange'))
    ])
    fig.update_layout(title='MACD Chart', hovermode='x unified')
    st.plotly_chart(fig, use_container_width=True)    